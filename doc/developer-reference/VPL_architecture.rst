=====================
Architecture Overview
=====================

API functions fall into the following categories:

======================================     ======================================
Category                                   Description
======================================     ======================================
CORE	                                     Auxiliary functions for synchronization
MEMORY                                     Returns surfaces from internally allocated pools
ENCODE	                                   Encode raw video frames into compressed bitstreams
DECODE	                                   Decode compressed video streams into raw video frames
VPP	                                       Perform video processing on raw video frames
Global	                                   Auxiliary functions for queries, device selection, init, etc.
======================================     ======================================

With the exception of the global auxiliary functions, API functions are named
after their functioning domain and category, as shown in the following image.
The image shows video domain functions.

.. image:: images/API_function_naming_convention.png
   :alt: API function name notation

Applications use API functions by linking with the API dispatcher library, as
shown in the following image. The dispatcher library identifies the processing
device on the running platform, determines the most suitable platform
library, and then redirects function calls.

.. graphviz::

  digraph {
    rankdir=TB;
    Application [shape=record label="Application" ];
    API [shape=record  label="API Dispatcher Library"];
    Lib1 [shape=record  label="API Library 1 (CPU)"];
    Lib2 [shape=record  label="API Library 2 (Platform 1)"];
    Lib3 [shape=record  label="API Library 3 (Platform 2)"];
    Application->API;
    API->Lib1;
    API->Lib2;
    API->Lib3;
  }

The application must use the include file, **mfxvideo.h** for C/C++ programming
and link the API dispatcher library(Linux: **libmfx.so**, Windows: **libmfx.lib**).

Include these files:

.. code-block:: c++

   #include "mfxvideo.h"    /* The API include file */

Link this library:

.. code-block:: c++

   /* The API dynamic dispatcher library */
   
   For Linux:   libmfx.so
   For Windoes: libmfx.lib

The API functions are organized into classes for easy reference. The classes
include **ENCODE** (encoding functions), **DECODE** (decoding functions), and
**VPP** (video processing functions).

**Init**, **Reset**, and **Close** are member functions within the **ENCODE**,
**DECODE**, and **VPP** classes that initialize, restart, and deinitialize
specific operations defined for the class. Call all other member functions within
a given class (except **Query** and **QueryIOSurf**) within the **Init** … **Reset**
(optional) … **Close** sequence.

The **Init** and **Reset** member functions both set up necessary internal
structures for media processing. The difference between the two is that the
**Init** functions allocate memory while the **Reset** functions only reuse
allocated internal memory. **Reset** can fail if the API needs to allocate
additional memory. **Reset** functions can also fine-tune **ENCODE** and **VPP**
parameters during those processes or reposition a bitstream during **DECODE**.

All API functions return status codes to indicate whether an operation succeeded
or failed. See the mfxStatus enumerator for all defined status codes. The status
code :cpp:enumerator:`MFX_ERR_NONE` indicates that the function successfully
completed its operation. Status codes are less than :cpp:enumerator:`MFX_ERR_NONE`
for all errors and greater than :cpp:enumerator:`MFX_ERR_NONE` for all warnings.

If an API function returns a warning, it has sufficiently completed its operation,
although the output of the function might not be strictly reliable. The application
must check the validity of the output generated by the function.

If an API function returns an error (except :cpp:enumerator:`MFX_ERR_MORE_DATA`,
:cpp:enumerator:`MFX_ERR_MORE_SURFACE`, or :cpp:enumerator:`MFX_ERR_MORE_BITSTREAM`),
the function aborts the operation. The application must call either the **Reset**
function to put the class back to a clean state, or the **Close** function to
terminate the operation. The behavior is undefined if the application continues
to call any class member functions without a **Reset** or **Close**. To avoid
memory leaks, always call the **Close** function after **Init**.
